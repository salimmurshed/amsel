part of 'dashboard_bloc.dart';

@freezed
class DashboardWithInitialState with _$DashboardWithInitialState {
  const factory DashboardWithInitialState({
    required double minute,
    required bool isLoading,
    required List<DashboardMenuModel> typeList,
    required List<DashboardMenuModel> levelList,
    required List<DashboardMenuModel> rangeList,
    required List<DashboardMenuModel> focusList,
    required String selectedType,
    required String selectedLevel,
    required String selectedRange,
    required String selectedFocus,
    required String selectedTypeDisplay,
    required String selectedLevelDisplay,
    required String selectedRangeDisplay,
    required String selectedFocusDisplay,
    required bool isRangeFocusVisible,
    required List<String> selectedFocusList,
    required bool hasSubscription,
    required int leftFreeTraining,
    required int trainingCount,
    required List<FavouriteTrainings> favouriteTrainings,
    required bool isFavLoading,
    required TextEditingController textEditingController,
    required FocusNode alertDialogFocusNode,
    required int textLength,
    required bool canStartFavTraining,
    required GlobalKey<FormState> formKey,
    required bool isRefresh,
  }) = _DashboardWithInitialState;

  factory DashboardWithInitialState.initial() => DashboardWithInitialState(
      isLoading: false,
      minute: TrainingConstants.durationSeconds,
      typeList: [],
      levelList: [],
      rangeList: [],
      focusList: [],
      selectedType: '',
      selectedLevel: '',
      selectedRange: '',
      selectedFocus: '',
      isRangeFocusVisible: false,
      selectedFocusList: [],
      hasSubscription: false,
      leftFreeTraining: 0,
      trainingCount: 0,
      favouriteTrainings: [],
      isFavLoading: false,
      textEditingController: TextEditingController(),
      alertDialogFocusNode: FocusNode(),
      textLength: 0,
      formKey: GlobalKey<FormState>(),
      isRefresh: false,
      canStartFavTraining: false,
      selectedTypeDisplay: '',
      selectedLevelDisplay: '',
      selectedRangeDisplay: '',
      selectedFocusDisplay: '');
}
